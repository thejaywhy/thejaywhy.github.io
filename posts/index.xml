<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on random_jy</title>
    <link>http://randomjy.com/posts/</link>
    <description>Recent content in Posts on random_jy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jon Young</copyright>
    <lastBuildDate>Thu, 28 May 2015 15:23:31 -0400</lastBuildDate>
    <atom:link href="http://randomjy.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Terraform - that was easy!</title>
      <link>http://randomjy.com/posts/easy-tf-do/</link>
      <pubDate>Thu, 28 May 2015 15:23:31 -0400</pubDate>
      
      <guid>http://randomjy.com/posts/easy-tf-do/</guid>
      <description>

&lt;p&gt;Dyn gives engineers a couple of days every quarter to work on &amp;ldquo;off roadmap&amp;rdquo; projects. During the most recent one, I worked on various small projects, this is one of them! I wanted to experiment with &lt;a href=&#34;http://terraform.io&#34;&gt;Terraform&lt;/a&gt;, a tool for making your infrastructure declarable - treating it just like your code.&lt;/p&gt;

&lt;p&gt;My example was trivial, but I hope to expand on it soon. All I did was spin up a node and install NGINX. You can find the source for it &lt;a href=&#34;https://github.com/thejaywhy/easy_tf_do&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;setup:e00c65342bed87d13765c0a31d6073e8&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;You&amp;rsquo;ll need to set up a DigitalOcean account, if you don&amp;rsquo;t have one, you can use my &lt;a href=&#34;https://www.digitalocean.com/?refcode=38b47f5765f4&#34;&gt;Referral Link&lt;/a&gt; to get a free credit! (I get some too).&lt;/p&gt;

&lt;p&gt;Once you have a DO account, you&amp;rsquo;ll need to set up a &amp;ldquo;Personal Access Token&amp;rdquo; (PAT) for the API. and an SSH key setup as well. See these excellent DigitalOcean tutorials for how to do that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2#HowToGenerateaPersonalAccessToken&#34;&gt;How To Use the DigitalOcean API v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets&#34;&gt;How To Use SSH Keys with DigitalOcean Droplets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, you&amp;rsquo;ll want to install Terraform. You can use the &lt;a href=&#34;http://www.terraform.io/downloads.html&#34;&gt;downloads page&lt;/a&gt; to get the appropriate package for your platform. I&amp;rsquo;m assuming you&amp;rsquo;re running from &lt;em&gt;not Windows&lt;/em&gt; (sorry).&lt;/p&gt;

&lt;p&gt;My Terraform configuration assumes that the configuration variables are available via environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TF_VAR_do_token={your_PAT}
$ export TF_VAR_ssh_fingerprint=$(ssh-keygen -lf ~/.ssh/id_rsa.pub | awk &#39;{print $2}&#39;)
$ export TF_VAR_pub_key=$HOME/.ssh/do_rsa.pub
$ export TF_VAR_pvt_key=$HOME/.ssh/do_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can pass in the variables to the terraform command line interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export DO_PAT={your_PAT}
$ export SSH_FINGERPRINT=$(ssh-keygen -lf ~/.ssh/id_rsa.pub | awk &#39;{print $2}&#39;)
$ terraform plan \
  -var &amp;quot;do_token=${DO_PAT}&amp;quot; \
  -var &amp;quot;pub_key=$HOME/.ssh/do_rsa.pub&amp;quot; \
  -var &amp;quot;pvt_key=$HOME/.ssh/do_rsa&amp;quot; \
  -var &amp;quot;ssh_fingerprint=$SSH_FINGERPRINT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;usage:e00c65342bed87d13765c0a31d6073e8&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;Now that you&amp;rsquo;ve&amp;rsquo; got your DO access setup and your environment configured, you&amp;rsquo;re ready to go! Clone this repo if you haven&amp;rsquo;t done so already:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/thejaywhy/easy_tf_do.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to the fun part, planning out your deployment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ terraform plan

+ digitalocean_droplet.web
    image:                &amp;quot;&amp;quot; =&amp;gt; &amp;quot;ubuntu-14-04-x64&amp;quot;
    ipv4_address:         &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    ipv4_address_private: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    ipv6_address:         &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    ipv6_address_private: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    locked:               &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    name:                 &amp;quot;&amp;quot; =&amp;gt; &amp;quot;web-1&amp;quot;
    region:               &amp;quot;&amp;quot; =&amp;gt; &amp;quot;nyc3&amp;quot;
    size:                 &amp;quot;&amp;quot; =&amp;gt; &amp;quot;512mb&amp;quot;
    ssh_keys.#:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;
    ssh_keys.0:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;${ssh_fingerprint}&amp;quot;
    status:               &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which shows you exactly what this Terraform configuration is going to do. To apply it, all you have to do is run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform apply
# ...bunch of output....
Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

Outputs:

  ipv4 = &amp;lt;droplet public ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now be able to visit the IP address and see the standard NGINX welcome screen. Hooooray!&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://randomjy.com/img/nginx_hooray.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;cleaning-up:e00c65342bed87d13765c0a31d6073e8&#34;&gt;Cleaning up&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll assume you don&amp;rsquo;t want this super simple droplet to be eating into your wallet, you&amp;rsquo;ll probably want to shut it down! You could use the Web UI or another API wrapper, or use Terraform, it&amp;rsquo;ll be easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ terraform plan -destroy
- digitalocean_droplet.web
$ terraform destroy
Do you really want to destroy?
  Terraform will delete all your managed infrastructure.
  There is no undo. Only &#39;yes&#39; will be accepted to confirm.

  Enter a value: yes

digitalocean_droplet.web: Refreshing state... (ID: 5364117)
digitalocean_droplet.web: Destroying...
digitalocean_droplet.web: Destruction complete

Apply complete! Resources: 0 added, 0 changed, 1 destroyed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it! Super simple to make your infrastructure with code!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book Report: Zero to One</title>
      <link>http://randomjy.com/posts/zero-to-one/</link>
      <pubDate>Mon, 04 May 2015 19:08:35 -0400</pubDate>
      
      <guid>http://randomjy.com/posts/zero-to-one/</guid>
      <description>&lt;p&gt;So, when you&amp;rsquo;ve got a newborn to take care off, reading is much harder. Luckily, there are audio books. I recently listened to Peter Theil &amp;amp; Blake Masters &lt;a href=&#34;http://www.amazon.com/Zero-One-Notes-Startups-Future/dp/0804139296&#34;&gt;Zero to One: Notes on Startups, or How to Build the Future&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I obtained this audio book via my local library, and the &lt;a href=&#34;https://www.overdrive.com/&#34;&gt;Overdrive&lt;/a&gt; app. This was my first experience with Overdrive, and it was OK. The app is a front to the overdrive website&amp;hellip;and I have to keep signing in with my library card in addition to signing up for an Overdrive account. It&amp;rsquo;d be nice if the app remembered my library card info, ya know? The listening experience was excellent, and I appreciated the ability to speed up the reader. I listened at 1.5x, I tried listening at 2x but I wasn&amp;rsquo;t retaining much while doing other things. The speed up is pretty awesome, I didn&amp;rsquo;t have that the last time I listened to an audio book - The Hitchhiker&amp;rsquo;s Guide to the Galaxy (on CD, again from my local library!).&lt;/p&gt;

&lt;p&gt;On to the book report! I found this book to be an interesting mash up of Theil&amp;rsquo;s own story with anecdotes about what has and has not worked. One of the themes that really struck me is that despite all the start up excitement and IPOs, we are actually making much technological advancement in a greater sense. There&amp;rsquo;s talk of how all the new start ups are looking to &amp;ldquo;disrupt&amp;rdquo;, but that&amp;rsquo;s not really creating something new, it is just incremental progress.&lt;/p&gt;

&lt;p&gt;I really enjoyed the sections that describe how &amp;ldquo;higher education&amp;rdquo; is failing America. People go to college and go through the motions of attending class, taking exams, and participating in extracurriculars for the sole purpose of landing a job post graduation. No one is learning how to think critically - how to solve problems. This is leading to stagnation in innovation not just in the &amp;ldquo;tech sector&amp;rdquo;, but other fields as well. I tend to agree with most of the statements in this book because I personally don&amp;rsquo;t feel as though I got much &lt;em&gt;experience&lt;/em&gt; from my time at Clarkson. I believe I could have studied Electrical Engineering, and still followed the same career path. Indeed, that&amp;rsquo;s very true of many, many software developers - they don&amp;rsquo;t all study Computer Science or Software Engineering in school. In fact, I&amp;rsquo;m going to encourage my children &lt;em&gt;not&lt;/em&gt; to attend a prestigious college - or any college at all. I think Higher Ed will drastically change in the next 15 years before they get there.&lt;/p&gt;

&lt;p&gt;Another interesting section discussed the sheer number of failures in the Clean Tech Bubble. I have to admit I did not realize the bubble had occurred, but looking back I can see it. All of the failed solar companies that failed publicly as a result. In this section, Theil breaks down his &amp;ldquo;7 Questions for Product Innovation&amp;rdquo;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Engineering Questions&lt;/strong&gt; - a massive technological leap, not incremental improvement&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Timing Question&lt;/strong&gt; - when are you entering the market, and what else is happening?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Monopoly Question&lt;/strong&gt; - Obtain a monopoly by being truly innovated&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The People Question&lt;/strong&gt; - do you have the right team to succeed?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Distribution Question&lt;/strong&gt; - how will sell?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Durability Question&lt;/strong&gt; - what&amp;rsquo;s your long term plan? how will you continue to innovate?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Secret Question&lt;/strong&gt; - Secrets are problems that haven&amp;rsquo;t been solved yet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Theil says if you don&amp;rsquo;t have an answer to all 7 questions, then you aren&amp;rsquo;t innovating. He cites Tesla as an example of a clean tech company that meets the 7 question criteria - and look at them, they keep killing it.&lt;/p&gt;

&lt;p&gt;The questions made a lot of sense to me, especially the People Question. You can&amp;rsquo;t hire a bunch of &amp;ldquo;rock stars&amp;rdquo; and expect magic. You need to create a team that&amp;rsquo;s united, not just in product vision, but outside of work too. I learned this playing Ultimate Frisbee. If you want your team to gel on the field, it takes more than practices and drills. You need to actually &lt;em&gt;know&lt;/em&gt; your teammates if you want to reach greatness on the field&amp;hellip; or in business.&lt;/p&gt;

&lt;p&gt;There are many other interesting points in the book, but the Education system deficiencies and the 7 Questions are really what stuck with me. The other major theme in the book is that monopolies are good - it allows companies to invest in innovation outside of their core compentencies. See: Google and all of the other stuff they build besides Search and Online Advertising.&lt;/p&gt;

&lt;p&gt;Overall, I enjoyed the book, although at times I thought it was rambling or repeating itself. I guess this comes from the fact that the book is based off a collection of essays given during a course at Standard (were Theil studied - that point you will not miss). And it was a good re-introduction to audio books.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Storing Vagrantfile configuration in a YAML file</title>
      <link>http://randomjy.com/posts/vagrant-yaml/</link>
      <pubDate>Sat, 07 Mar 2015 12:16:19 -0500</pubDate>
      
      <guid>http://randomjy.com/posts/vagrant-yaml/</guid>
      <description>&lt;p&gt;Have you heard of &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;? It&amp;rsquo;s a pretty awesome way to manage VMs, containers, or even cloud instances. You can use the &lt;code&gt;Vagrantfile&lt;/code&gt; to set up and configure the instance, check it into git, and share! Now you can rely on everyone to have the same starting point. Makes setting up development environments a breeze. And today I&amp;rsquo;d like to share with you something to make it even easier to use.&lt;/p&gt;

&lt;p&gt;So when you run &lt;code&gt;vagrant up&lt;/code&gt; the vagrant tool is going to take and evaluate your &lt;code&gt;Vagrantfile&lt;/code&gt;. Here&amp;rsquo;s an example &lt;code&gt;Vagrantfile&lt;/code&gt; taken from the Vagrant docs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.box = &amp;quot;hashicorp/precise32&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use that to spin up an Ubuntu 12.04 (Precise) 32-bit VM. It&amp;rsquo;s just that simple. Of course there are all sorts of additional options you might want to configure such as number of CPUs, memory size, or network interfaces. I feel that adding all of these options to the &lt;code&gt;Vagrantfile&lt;/code&gt; makes for a hard read, but there is a better way!&lt;/p&gt;

&lt;p&gt;Turns out you can just write &lt;code&gt;ruby&lt;/code&gt; right there in the &lt;code&gt;Vagrantfile&lt;/code&gt;, and you get access to &lt;em&gt;full ruby&lt;/em&gt;. So that means you can instruct Vagrant to open other files when it evaluates the &lt;code&gt;Vagrantfile&lt;/code&gt;. This means I can add my config to another file, where it&amp;rsquo;ll be easier to manage. Here&amp;rsquo;s my new &lt;code&gt;Vagrantfile&lt;/code&gt; that reads its config from a YAML file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

DIR = File.dirname(__FILE__)

require &amp;quot;yaml&amp;quot;

$env_config = YAML.load_file(File.join(DIR, &amp;quot;env.yml&amp;quot;))

Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.box = $env_config[&amp;quot;box&amp;quot;]

  $env_config[&amp;quot;instances&amp;quot;].each do |instance|
    instance_name = instance[&amp;quot;name&amp;quot;]
    config.vm.define instance_name do |instance_config|

      # instance is the yaml configuration hash for the node
      # instance_config is the Vagrant configuration for the instance

      instance_config.vm.hostname = instance_name
      instance_config.vm.network :private_network, ip: instance[&amp;quot;box_ip&amp;quot;]

      # set up the provider for the instance
      instance_config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
        v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, instance[&amp;quot;memory&amp;quot;]]
        v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--cpus&amp;quot;, instance[&amp;quot;cpu&amp;quot;]]
        v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--natdnshostresolver1&amp;quot;, &amp;quot;on&amp;quot;]
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously what we have here is suddenly more complicated! Now we have added the ability to spin up multiple VMs, all specified from an &lt;code&gt;env.yml&lt;/code&gt; file. We name each instance, assign it a private network IP, and configure the memory, CPU, and NAT settings. All of the relevant settings are taking from that YAML file, so lets take a look at it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;instances:
  - name: database
    box: ubuntu/trusty64
    box_ip: 10.1.10.10
    memory: 512
    cpu: 2
  - name: web
    box: ubuntu/trusty64
    box_ip: 10.1.10.20
    memory: 256
    cpu: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can see that our environment will have two VMs, the database and the web server. We&amp;rsquo;ve specified that they&amp;rsquo;ll use the same base box, but have some different settings. If we find we need to add another box in the future, all we have to do is add another named instances in the &lt;code&gt;env.yml&lt;/code&gt; file! Easy!&lt;/p&gt;

&lt;p&gt;Lets test it out!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant status
Current machine states:

database                  not created (virtualbox)
web                       not created (virtualbox)

This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.
$ vagrant up
# lots of output....
$ vagrant status
Current machine states:

database                  running (virtualbox)
web                       running (virtualbox)

This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant will go ahead and download the ubuntu/trusty64 box for us, and then spin up the VM using virtualbox. We can then use &lt;code&gt;vagrant ssh database&lt;/code&gt; or &lt;code&gt;vagrant ssh web&lt;/code&gt; to SSH into our boxes and configure them. BAM. It&amp;rsquo;s that simple.&lt;/p&gt;

&lt;p&gt;Now we have a pretty common &lt;code&gt;Vagrantfile&lt;/code&gt; we can use for all of our projects, and we just have to manage a YAML file. I&amp;rsquo;ve found that moving the node configuration out of the &lt;code&gt;Vagrantfile&lt;/code&gt; and into a YAML file has decreased confusion on our team. Especially from the Python developers that have no desire to write &lt;em&gt;anything&lt;/em&gt; in ruby!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dad is Fat - Review</title>
      <link>http://randomjy.com/posts/dad-is-fat/</link>
      <pubDate>Sat, 28 Feb 2015 13:31:15 -0500</pubDate>
      
      <guid>http://randomjy.com/posts/dad-is-fat/</guid>
      <description>&lt;p&gt;I recently finished reading Jim Gaffigan&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/Dad-Fat-Jim-Gaffigan/dp/0385349076/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1425148385&amp;amp;sr=1-1&amp;amp;keywords=dad+is+fat&#34;&gt;Dad is Fat&lt;/a&gt;. It was a great read, I definitely laughed out loud every chapter. My wife was not amused. Reading this book put me back on track for my 2015 goal of 2 books a month.&lt;/p&gt;

&lt;p&gt;The book is basically a collection of essays about how Gaffigan came to have a family with 5 children, living in a 2 bedroom apartment in NYC. That&amp;rsquo;s crazy, I only have 1 kid (so far) and that&amp;rsquo;s more than enough work. 5 kids? Working nights doing stand up? When does he sleep? He admits to not really ever sleeping. Still impressive.&lt;/p&gt;

&lt;p&gt;A general theme throughout the book is Gaffigan&amp;rsquo;s wife, Jeannie, and how she makes everything work (even his stand up). He even correctly refers to himself as just another one of the kids. I know my wife often thinks &lt;em&gt;&amp;ldquo;I have two children, but at least I only have to change diapers for the&lt;/em&gt; actual &lt;em&gt;kid.&amp;rdquo;&lt;/em&gt; I&amp;rsquo;m in no hurry to grow up, especially when I&amp;rsquo;m spending time with kids.&lt;/p&gt;

&lt;p&gt;My favorite chapter of the book is where Gaffigan compares the role of the Dad to that of Vice President. A figurehead, with no real power. I often feel this way, my kid will &lt;em&gt;always&lt;/em&gt; go for Mom. I really am just someone to play with. But I wonder if that&amp;rsquo;s because I spend so much time at work, instead of in the house? Gaffigan seems to spend a lot of time with his kids, but he&amp;rsquo;s still just VP.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve got kids, and free time, you should definitely checkout &lt;em&gt;Dad is Fat&lt;/em&gt;. You&amp;rsquo;ll find a lot of stuff to relate to in there. If you don&amp;rsquo;t have kids, you&amp;rsquo;ll still find laughs, but you may be scared away from having kids for ever. Maybe even skip the whole marriage thing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to reading Jim Gaffigan&amp;rsquo;s next book, &lt;a href=&#34;http://www.amazon.com/Food-Love-Story-Jim-Gaffigan/dp/0804140413/ref=pd_sim_b_1?ie=UTF8&amp;amp;refRID=1SGD8NJM1565YNSBCG4R&#34;&gt;Food: A Love Story&lt;/a&gt;. I will no doubt get a few dirty looks from my wife while I laugh my way through that book too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>January/February 2015 Reading List</title>
      <link>http://randomjy.com/posts/remote-rework-win/</link>
      <pubDate>Sat, 07 Feb 2015 20:02:07 -0500</pubDate>
      
      <guid>http://randomjy.com/posts/remote-rework-win/</guid>
      <description>

&lt;p&gt;One of my goals for 2015 is to read 2 books a month.  I made this goal towards the end of the January, so I&amp;rsquo;m pretty pleased to say I got one book done in January, and &lt;em&gt;two&lt;/em&gt; in the first seven days of February. Now I just need to finish another one to get my average back on track. I&amp;rsquo;ve been getting copies of these books from my local library. The great thing about my library is that it is a part of a system of libraries that make it easy to borrow books from any library in the area. It really expands the number of books I have at my disposal.&lt;/p&gt;

&lt;h3 id=&#34;rework-remote:d60164a73e516b5e526672678dfb4449&#34;&gt;Rework &amp;amp; Remote&lt;/h3&gt;

&lt;p&gt;In January I read &lt;a href=&#34;https://37signals.com/rework&#34;&gt;Rework&lt;/a&gt;, and followed it up with &lt;a href=&#34;https://37signals.com/remote&#34;&gt;Remote&lt;/a&gt;, both by the founders of &lt;a href=&#34;https://37signals.com&#34;&gt;37signals&lt;/a&gt; Both of these books are a pretty easy read, a collection of short essays more than anything. Also each essay comes with a nifty illustration. My favorite line from either book is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A stuffed backlog is a stale backlog&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This really hit home for me as a Scrum Master. Our backlog is packed with stuff that we&amp;rsquo;ll get to &amp;ldquo;some day&amp;rdquo;. Using your backlog for a place to capture ideas is doing it wrong.&lt;/p&gt;

&lt;p&gt;I wouldn&amp;rsquo;t say there&amp;rsquo;s anything revolutionary about either of these books, but they are a both a solid, quick read, worth your time if you work in the Tech Industry. It looks like they have a third book, &lt;a href=&#34;http://www.amazon.com/Getting-Real-Smarter-Successful-Application/dp/0578012812/ref=sr_1_1?ie=UTF8&amp;amp;qid=1423358012&amp;amp;sr=8-1&amp;amp;keywords=getting+real+37+signals&#34;&gt;Getting Real&lt;/a&gt; that I&amp;rsquo;ll probably check out.&lt;/p&gt;

&lt;h3 id=&#34;how-to-win-friends-influence-people:d60164a73e516b5e526672678dfb4449&#34;&gt;How to Win Friends &amp;amp; Influence People&lt;/h3&gt;

&lt;p&gt;The other book I finished in February was &lt;a href=&#34;https://www.amazon.com/How-Friends-Influence-People-Revised/dp/067142517X/ref=sr_1_5?s=books&amp;amp;ie=UTF8&amp;amp;qid=1423357609&amp;amp;sr=1-5&amp;amp;keywords=how+to+win+friends+and+influence+people&#34;&gt;How to Win Friends &amp;amp; Influence People&lt;/a&gt;. I find this book on lots of people&amp;rsquo;s &amp;ldquo;must read&amp;rdquo; lists. And I can understand why: the book is good at teaching you things you should just know. The book teaches through many, many anecdotes that lead to a single principle for each chapter.&lt;/p&gt;

&lt;p&gt;I found this book helpful in changing how I communicate with others. I&amp;rsquo;ve always thought of myself as someone who lives by the Golden Rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Do unto others as you would have done unto yourself.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But the problem is, how I like to be treated is irrelevant when talking with other people. I like my conversations to be short and to the point, and let logic prevail. That&amp;rsquo;s not really what communication is all about for most people. This book has helped me really understand that. I&amp;rsquo;ll probably need to re-read this one every few months to keep myself from sliding back to my very direct conversational style.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Resolutions for 2015</title>
      <link>http://randomjy.com/posts/resolutions-for-2015/</link>
      <pubDate>Sat, 31 Jan 2015 19:57:16 -0500</pubDate>
      
      <guid>http://randomjy.com/posts/resolutions-for-2015/</guid>
      <description>

&lt;p&gt;Now that it is February, time to make some goals for myself in 2015.&lt;/p&gt;

&lt;h2 id=&#34;be-an-even-awesomer-husband-father:87223ae63adbc1cf20a73dc9414eb665&#34;&gt;Be an even awesomer Husband &amp;amp; Father&lt;/h2&gt;

&lt;p&gt;I like to think I&amp;rsquo;m doing a pretty decent job at this already, but there&amp;rsquo;s always room for improvement. And our family will be expanding from 3 to 4 in 2015!&lt;/p&gt;

&lt;h2 id=&#34;make-a-blog-and-keep-writing-for-it:87223ae63adbc1cf20a73dc9414eb665&#34;&gt;Make a blog&amp;hellip; and keep writing for it&lt;/h2&gt;

&lt;p&gt;Well, you&amp;rsquo;re here, so I&amp;rsquo;m doing pretty well so far. Of course, we&amp;rsquo;ll see if I can keep going.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve written what I&amp;rsquo;ve got so far using &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;. It&amp;rsquo;s a pretty sweet static site generator written in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;. I like that I can write everything in markdown. After using github for a couple of years, I have problems writing in anything other than Markdown.&lt;/p&gt;

&lt;h2 id=&#34;read-2-books-a-month:87223ae63adbc1cf20a73dc9414eb665&#34;&gt;Read 2 Books a Month&lt;/h2&gt;

&lt;p&gt;Last year I averaged maybe 1 book a month. I read mostly fiction in 2014. In 2015 I&amp;rsquo;m looking to read both fiction and non-fiction. Ideally one of each type every month. Not sure how the other goals will affect this one. I plan to make time to read in the mornings, after I wake up. Hopefully the house will still be quiet at that point.&lt;/p&gt;

&lt;h2 id=&#34;re-implement-this-blog:87223ae63adbc1cf20a73dc9414eb665&#34;&gt;Re-Implement this blog&lt;/h2&gt;

&lt;p&gt;This is definitely a stretch goal, but I&amp;rsquo;d like to try re-implementing this blog using various frameworks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;rails (no experience)&lt;/li&gt;
&lt;li&gt;django (some experience from work stuff)&lt;/li&gt;
&lt;li&gt;elixir (no experience)&lt;/li&gt;
&lt;li&gt;go &amp;amp; its magnificent stdlib (some experience)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ideally, I&amp;rsquo;ll write the blog apps to intake the same markdown used by Hugo. And then take advantage of various CI/CD pipelines to deploy new posts too all the apps at the same time.&lt;/p&gt;

&lt;p&gt;Then the log term plan becomes use DNS tricks to randomly send users to a different destination. They&amp;rsquo;ll only know what type of framework they are seeing by a &amp;ldquo;bug&amp;rdquo; in the footer. Sounds neat, right?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>